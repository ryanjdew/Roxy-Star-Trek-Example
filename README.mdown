# Star Trek Demo
This application was built with MarkLogic's Application Builder and was customized to use the Semantic Interpreter REST API extension described below. If you search for people, such as "Tasha Yar", the info panel will populate with information about Tasha Yar. There will also be a link to edit the phrases associated with the resource. For example, you can add "Tasha" so it will recognize that searches conatining "Tasha" are talking about Tasha Yar. 

If you search for the relationships, such as "Tasha Yar romantically involved with", you will see information about all parties involved. Then you can then edit the phrases associated with each part of the triple. In the mentioned example that would be "Tasha Yar", "romantically involved with", and "Data".

The example content provided is derived from Star Trek character data retrieved from [Freebase](http://freebase.com)

# Semantic Interpreter
This REST API makes use of MarkLogic's reverse queries and triple index to provide human readable answers to human readable queries. 

## Getting Started

Run the following commands for initial setup. 

<pre><code>ml local bootstrap</code></pre>
<pre><code>ml local deploy content</code></pre>
<pre><code>ml local deploy modules</code></pre>

Those commmands will create the semantic-interpreter REST API extension.

The GET method takes a query that is used to return relevant triples. Below is an example of query to determine the who Tash Yar is romantically involved with.

<pre><code>curl -X GET -H "content-type:application/xml" http://localhost:8050/v1/resources/semantic-interpreter?rs:query=Tasha+Yar+romantically+involved+with</code></pre>

Result:

<pre><code>&lt;result&gt;
&lt;query&gt;tasha yar romantically involved with&lt;/query&gt;
&lt;parsed-query comprehension="1"&gt;
&lt;match iri="/en/tasha_yar" type="resource"&gt;tasha yar&lt;/match&gt;
&lt;match iri="/fictional_universe/character_romantically_involved_with" type="predicate"&gt;romantically involved with&lt;/match&gt;
&lt;/parsed-query&gt;
&lt;matching-triple&gt;Data romantically involved with Tasha Yar&lt;/matching-triple&gt;
&lt;matching-triple&gt;Tasha Yar romantically involved with Data&lt;/matching-triple&gt;
&lt;/result&gt;</code></pre>

Before doing anything else you can try the a similar query as before, but replace "romantically involved with" with "dating" as below.

<pre><code>curl -X GET -H "content-type:application/xml" http://localhost:8050/v1/resources/semantic-interpreter?rs:query=Tasha+Yar+dating</code></pre>

You will notice that the results aren't so great/accurate. Fortunately there is a way to fix that.

You can change the words/phrases associated with a resource (subject/object) or predicate. This is done by using the PUT method and passing the uri of the resource or predicate and passing a payload of document-node(element(phrases)) that contains a sequence of element(phrase). The first element(phrase) is used for the display text in the GET method and uses all element(phrase) to build reverse queries to associate with the resource or predicate. 

<pre><code>curl -X PUT -H "content-type:application/xml" http://localhost:8050/v1/resources/semantic-interpreter?rs:uri=%2Ffictional_universe%2Fcharacter_romantically_involved_with -d '&lt;phrases&gt;&lt;phrase&gt;romantically involved with&lt;/phrase&gt;&lt;phrase&gt;dating&lt;/phrase&gt;&lt;phrase&gt;courting&lt;/phrase&gt;&lt;/phrases&gt;' --anyauth --user admin:admin</code></pre>

Now if you run the query containing "dating" you will see that you now get much better results.

The comprehension attribute on the parsed query is a simple indicator to help you determine how well your query was understood by the system.
